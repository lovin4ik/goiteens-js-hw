const btnBegin = document.querySelector('.btn-begin')

const lesson20 = () => {
	const gallaryImages = document.querySelectorAll('.image-wrapper')

	let activeImage = 0

	document.addEventListener('keydown', e => {
		if (e.key === 'ArrowRight') {
			activeImage++
			if (activeImage > gallaryImages.length - 1) {
				activeImage = 0
			}
		} else if (e.key === 'ArrowLeft') {
			if (activeImage > 0) {
				activeImage = activeImage - 1
			} else {
				activeImage = gallaryImages.length - 1
			}
		}
		gallaryImages.forEach(image => {
			image.style.transform = `translateX(-${activeImage * 320}px)`
		})
	})

	//todo [2]
	console.log('%c [2] ', 'color: yellow; background-color: #2274A5')
	//? üî∏ –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
	//? –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ input
	//? —ñ –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –°—Ç–≤–æ—Ä–∏—Ç–∏, –ø—ñ—Å–ª—è —á–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –∫–æ–ª–µ–∫—Ü—ñ—è.
	//? –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—á–∏—Å—Ç–∏—Ç–∏, –∫–æ–ª–µ–∫—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –æ—á–∏—â–∞—î—Ç—å—Å—è.
	//? üî∏ –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é createBoxes(amount),
	//? —è–∫–∞ –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä amount - —á–∏—Å–ª–æ.
	//? –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î —Å—Ç—ñ–ª—å–∫–∏ div,
	//? —Å–∫—ñ–ª—å–∫–∏ –≤–∫–∞–∑–∞–Ω–æ –≤ amount —ñ –¥–æ–¥–∞—î —ó—Ö –≤ div#boxes.
	//? üî∏ –ö–æ–∂–µ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–∏–π div:
	//? - –ú–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π rgb –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É
	//? - –†–æ–∑–º—ñ—Ä–∏ –Ω–∞–π–ø–µ—Ä—à–æ–≥–æ div ‚Äî 30px –Ω–∞ 30px
	//? - –ö–æ–∂–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π div –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ,
	//?   –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —à–∏—Ä—à–µ —ñ –≤–∏—â–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –Ω–∞ 10px
	//? üî∏ –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é destroyBoxes(), —è–∫–∞ –æ—á–∏—â–∞—î div#boxes.
	//? ‚ú¥Ô∏è –í HTML —î —Ç–∞–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:
	/*
		<div id="controls">
			<input type="number" min="0" max="100" step="1" />
			<button type="button" data-action="render">–°—Ç–≤–æ—Ä–∏—Ç–∏</button>
			<button type="button" data-action="destroy">–û—á–∏—Å—Ç–∏—Ç–∏</button>
		</div>

		<div id="boxes"></div>
	*/
	//! –ö–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è

	const createNumber = document.querySelector('[data-action="render"]')
	const deleteAllNumbers = document.querySelector('[data-action="destroy"]')
	const inputNumber = document.querySelector('#controls > input')
	const boxes = document.querySelector('#boxes')

	const randomColor = () => {
		const r = Math.floor(Math.random() * 256)
		const g = Math.floor(Math.random() * 256)
		const b = Math.floor(Math.random() * 256)
		return `rgb(${r}, ${g}, ${b})`
	}

	const createBoxes = amount => {
		boxes.innerHTML = ''
		const fragment = document.createDocumentFragment()

		for (let i = 0; i < amount; i++) {
			const div = document.createElement('div')
			const size = 30 + 10 * i
			div.style.width = `${size}px`
			div.style.height = `${size}px`
			div.style.backgroundColor = `${randomColor()}`
			console.log(div)
			fragment.append(div)
		}

		boxes.append(fragment)
	}

	const destroyBoxes = () => {
		boxes.innerHTML = ''
	}

	createNumber.addEventListener('click', () => {
		createBoxes(inputNumber.value)
	})
	deleteAllNumbers.addEventListener('click', destroyBoxes)

	console.log('--------------------------------------------------')
}

lesson20()
btnBegin.addEventListener('click', lesson20)
